import{_ as e,c as a,a2 as n,o as r}from"./chunks/framework.Dz7_3PEu.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"2-iOS/一、Swift/Swift语法.md","filePath":"2-iOS/一、Swift/Swift语法.md"}'),i={name:"2-iOS/一、Swift/Swift语法.md"};function s(l,t,d,c,o,p){return r(),a("div",null,t[0]||(t[0]=[n(`<h4 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h4><h4 id="_1-值类型" tabindex="-1">1. 值类型 <a class="header-anchor" href="#_1-值类型" aria-label="Permalink to &quot;1. 值类型&quot;">​</a></h4><p>枚举（enum）:</p><p>Optional</p><p>结构体（struct）:</p><p>非集合类型:</p><p>Bool Double Float Int Character String</p><p>集合类型:</p><p>Array Dictionary Set</p><h4 id="_2-引用类型" tabindex="-1">2. 引用类型 <a class="header-anchor" href="#_2-引用类型" aria-label="Permalink to &quot;2. 引用类型&quot;">​</a></h4><p>类（class）</p><h4 id="_3-swift-中的函数派发" tabindex="-1">3. Swift 中的函数派发 <a class="header-anchor" href="#_3-swift-中的函数派发" aria-label="Permalink to &quot;3. Swift 中的函数派发&quot;">​</a></h4><table><thead><tr><th align="center"></th><th align="center"><strong>直接派发</strong></th><th align="center"><strong>函数表派发</strong></th><th align="center"><strong>消息派发</strong></th></tr></thead><tbody><tr><td align="center">NSObject</td><td align="center">@nonobjc 或者 final 修饰的方法</td><td align="center">声明作用域中方法</td><td align="center">扩展方法及被 dynamic 修饰的方法</td></tr><tr><td align="center">Class</td><td align="center">不被 @objc 修饰的扩展方法及被 final 修饰的方法</td><td align="center">声明作用域中方法</td><td align="center">dynamic 修饰的方法或者被 @objc 修饰的扩展方法</td></tr><tr><td align="center">Protocol</td><td align="center">扩展方法</td><td align="center">声明作用域中方法</td><td align="center">@objc 修饰的方法或者被 objc 修饰的协议中所有方法</td></tr><tr><td align="center">Value Type</td><td align="center">所有方法</td><td align="center">无</td><td align="center">无</td></tr><tr><td align="center">其他</td><td align="center">全局方法，staic 修饰的方法；使用 final 声明的类里面的所有方法；使用 private 声明的方法和属性会隐式 final 声明；</td><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="_4、oc与swift调用" tabindex="-1">4、oc与swift调用 <a class="header-anchor" href="#_4、oc与swift调用" aria-label="Permalink to &quot;4、oc与swift调用&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>“如果你用 Swift 写的 class 是继承自 NSObject 的话，Swift 会默认自动为所有的非 private 的类和成员加上 @objc。这就是说，对一个 NSObject 的子类，你只需要导入相应的头文件就可以在 Objective-C 里使用这个类了”</span></span>
<span class="line"><span></span></span>
<span class="line"><span>摘录来自: 王巍 (onevcat). “Swifter - Swift 必备 Tips (第四版)。” Apple Books.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><p><a href="https://juejin.cn/post/7119020967430455327" target="_blank" rel="noreferrer">01-📝Swift5常用核心语法|了解Swift【Swift简介、Swift的版本、Swift编译原理、几种函数派发】</a></p><p><a href="https://juejin.cn/post/7119510159109390343#heading-66" target="_blank" rel="noreferrer">02-📝Swift5常用核心语法|基础语法【Playground、常量与变量、常见数据类型、字面量、元组、流程控制、函数、枚举、可选项、guard语句、区间】</a></p><p><a href="https://juejin.cn/post/7253350009289424933" target="_blank" rel="noreferrer">Swift5常用核心语法|编程范式与Swift源码【从OC到Swift、函数式编程、面向协议编程、响应式编程、Swift源码分析】</a></p><p><a href="https://juejin.cn/post/6978870445416120350#heading-4/" target="_blank" rel="noreferrer">Swift 派发机制 </a></p>`,20)]))}const g=e(i,[["render",s]]);export{f as __pageData,g as default};
