import{_ as e,c as r,a2 as t,o as h}from"./chunks/framework.Dz7_3PEu.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"1-基础-4-数据结构与算法/数据结构/5.二叉树.md","filePath":"1-基础-4-数据结构与算法/数据结构/5.二叉树.md"}'),o={name:"1-基础-4-数据结构与算法/数据结构/5.二叉树.md"};function l(i,a,n,s,d,c){return h(),r("div",null,a[0]||(a[0]=[t('<h4 id="一、常见二叉树类型" tabindex="-1">一、常见二叉树类型 <a class="header-anchor" href="#一、常见二叉树类型" aria-label="Permalink to &quot;一、常见二叉树类型&quot;">​</a></h4><h5 id="完美二叉树" tabindex="-1">完美二叉树 <a class="header-anchor" href="#完美二叉树" aria-label="Permalink to &quot;完美二叉树&quot;">​</a></h5><h5 id="完全二叉树" tabindex="-1">完全二叉树 <a class="header-anchor" href="#完全二叉树" aria-label="Permalink to &quot;完全二叉树&quot;">​</a></h5><p>定义：只有最底层的节点未被填满，且最底层节点尽量靠左填充。 <img src="https://www.hello-algo.com/chapter_tree/binary_tree.assets/complete_binary_tree.png" alt="image"></p><h5 id="完满二叉树" tabindex="-1">完满二叉树 <a class="header-anchor" href="#完满二叉树" aria-label="Permalink to &quot;完满二叉树&quot;">​</a></h5><h5 id="平衡二叉树" tabindex="-1">平衡二叉树 <a class="header-anchor" href="#平衡二叉树" aria-label="Permalink to &quot;平衡二叉树&quot;">​</a></h5><p>定义：任意节点的左子树和右子树的高度之差的绝对值不超过 1 <img src="https://www.hello-algo.com/chapter_tree/binary_tree.assets/balanced_binary_tree.png" alt="image"></p><h4 id="二、遍历" tabindex="-1">二、遍历 <a class="header-anchor" href="#二、遍历" aria-label="Permalink to &quot;二、遍历&quot;">​</a></h4><h5 id="层度遍历" tabindex="-1">层度遍历 <a class="header-anchor" href="#层度遍历" aria-label="Permalink to &quot;层度遍历&quot;">​</a></h5><p>定义：从顶部到底部逐层遍历</p><h5 id="前序遍历" tabindex="-1">前序遍历 <a class="header-anchor" href="#前序遍历" aria-label="Permalink to &quot;前序遍历&quot;">​</a></h5><p>遍历顺序：根节点、左子树、右右子树</p><h5 id="中️序遍历" tabindex="-1">中️序遍历 <a class="header-anchor" href="#中️序遍历" aria-label="Permalink to &quot;中️序遍历&quot;">​</a></h5><p>遍历顺序：左子树、根节点、右右子树</p><h5 id="后序遍历" tabindex="-1">后序遍历 <a class="header-anchor" href="#后序遍历" aria-label="Permalink to &quot;后序遍历&quot;">​</a></h5><p>遍历顺序：左子树、右右子树、根节点</p><h5 id="深度搜索" tabindex="-1">深度搜索 <a class="header-anchor" href="#深度搜索" aria-label="Permalink to &quot;深度搜索&quot;">​</a></h5><h4 id="三、二叉搜索树" tabindex="-1">三、二叉搜索树 <a class="header-anchor" href="#三、二叉搜索树" aria-label="Permalink to &quot;三、二叉搜索树&quot;">​</a></h4><p>定义： 1、对于根节点，左子树中所有节点的值 &lt; 根节点的值 &lt; 右子树中所有节点的值。 2、任意节点的左、右子树也是二叉搜索树，即同样满足条件 1. <img src="https://www.hello-algo.com/chapter_tree/binary_search_tree.assets/binary_search_tree.png" alt="image"></p><h4 id="四、剪枝" tabindex="-1">四、剪枝 <a class="header-anchor" href="#四、剪枝" aria-label="Permalink to &quot;四、剪枝&quot;">​</a></h4><h4 id="五、字典树" tabindex="-1">五、字典树 <a class="header-anchor" href="#五、字典树" aria-label="Permalink to &quot;五、字典树&quot;">​</a></h4><h4 id="六、平衡二叉搜索树-avl" tabindex="-1">六、平衡二叉搜索树 AVL <a class="header-anchor" href="#六、平衡二叉搜索树-avl" aria-label="Permalink to &quot;六、平衡二叉搜索树 AVL&quot;">​</a></h4><h4 id="七、红黑树" tabindex="-1">七、红黑树 <a class="header-anchor" href="#七、红黑树" aria-label="Permalink to &quot;七、红黑树&quot;">​</a></h4><h4 id="八、b树" tabindex="-1">八、B树 <a class="header-anchor" href="#八、b树" aria-label="Permalink to &quot;八、B树&quot;">​</a></h4><h4 id="九、b-树" tabindex="-1">九、B+树 <a class="header-anchor" href="#九、b-树" aria-label="Permalink to &quot;九、B+树&quot;">​</a></h4>',25)]))}const m=e(o,[["render",l]]);export{u as __pageData,m as default};
