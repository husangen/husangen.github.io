import{_ as n,c as s,a2 as e,o as i}from"./chunks/framework.Dz7_3PEu.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"1-基础-4-数据结构与算法/算法/1.排序算法.md","filePath":"1-基础-4-数据结构与算法/算法/1.排序算法.md"}'),l={name:"1-基础-4-数据结构与算法/算法/1.排序算法.md"};function t(r,a,p,o,c,h){return i(),s("div",null,a[0]||(a[0]=[e(`<h4 id="_0、算法概述" tabindex="-1">0、算法概述 <a class="header-anchor" href="#_0、算法概述" aria-label="Permalink to &quot;0、算法概述&quot;">​</a></h4><h6 id="_0-1-分类" tabindex="-1">0.1 分类 <a class="header-anchor" href="#_0-1-分类" aria-label="Permalink to &quot;0.1 分类&quot;">​</a></h6><p><img src="https://img2018.cnblogs.com/blog/849589/201903/849589-20190306165258970-1789860540.png" alt="image"></p><h6 id="_0-2-算法复杂度" tabindex="-1">0.2 算法复杂度 <a class="header-anchor" href="#_0-2-算法复杂度" aria-label="Permalink to &quot;0.2 算法复杂度&quot;">​</a></h6><p><img src="https://images2018.cnblogs.com/blog/849589/201804/849589-20180402133438219-1946132192.png" alt="image"></p><h4 id="_1、冒泡排序" tabindex="-1">1、冒泡排序 <a class="header-anchor" href="#_1、冒泡排序" aria-label="Permalink to &quot;1、冒泡排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015223238449-2146169197.gif" alt="image"></p><h4 id="_2、选择排序" tabindex="-1">2、选择排序 <a class="header-anchor" href="#_2、选择排序" aria-label="Permalink to &quot;2、选择排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015224719590-1433219824.gif" alt="image"></p><h4 id="_3、插入排序" tabindex="-1">3、插入排序 <a class="header-anchor" href="#_3、插入排序" aria-label="Permalink to &quot;3、插入排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015225645277-1151100000.gif" alt="image"></p><h4 id="_4、希尔排序" tabindex="-1">4、希尔排序 <a class="header-anchor" href="#_4、希尔排序" aria-label="Permalink to &quot;4、希尔排序&quot;">​</a></h4><p><img src="https://images2018.cnblogs.com/blog/849589/201803/849589-20180331170017421-364506073.gif" alt="image"></p><h4 id="_5、归并排序" tabindex="-1">5、归并排序 <a class="header-anchor" href="#_5、归并排序" aria-label="Permalink to &quot;5、归并排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015230557043-37375010.gif" alt="image"></p><h4 id="_6、快速排序" tabindex="-1">6、快速排序 <a class="header-anchor" href="#_6、快速排序" aria-label="Permalink to &quot;6、快速排序&quot;">​</a></h4><h5 id="_1、单向的指针算法" tabindex="-1">1、单向的指针算法 <a class="header-anchor" href="#_1、单向的指针算法" aria-label="Permalink to &quot;1、单向的指针算法&quot;">​</a></h5><p><img src="https://img-blog.csdnimg.cn/2019060415201822.gif" alt="image"> 使用单向指针遍历，首先将首元素设置为比较元素p，然后将第二个元素依次与比较元素p比较，如果大于比较元素则跳过，如果小于比较元素则将其与前面较大的元素进行交换，将数组中所有元素交换完毕后，再将比较元素放到中间位置</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//划分数组的函数</span></span>
<span class="line"><span>int split(int a[], int low, int high)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    int i = low;    //i指向比较元素的期望位置</span></span>
<span class="line"><span>    int x = a[i];    //将该数组第一个元素设置为比较元素</span></span>
<span class="line"><span>    //从数组的第二个元素起开始遍历，若找到的元素大于比较元素，则跳过</span></span>
<span class="line"><span>    for(int j = low+1;j&lt;=high;j++)</span></span>
<span class="line"><span>        //若找到了小于比较元素的数，则将其与前面较大的数进行交换</span></span>
<span class="line"><span>        if (a[j] &lt;= x)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            i++;</span></span>
<span class="line"><span>            swap(a[i], a[j]);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    swap(a[low], a[i]);    //将比较元素交换到期望位置</span></span>
<span class="line"><span>    return i;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="_2、双指针算法" tabindex="-1">2、双指针算法 <a class="header-anchor" href="#_2、双指针算法" aria-label="Permalink to &quot;2、双指针算法&quot;">​</a></h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbabc9d57fd6498890b441cc6a188a15~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="image"> partition算法使用头尾两个方向相反的指针进行遍历，先将数组第一个元素设置为比较元素，头指针从左至右找到第一个大于比较元素的数，尾指针从右至左找到第一个小于比较元素的数，全部交换完毕后将比较元素放到中间位置。</p><pre><code>int partition(int a[], int low, int high)
{
    int x = a[low];    //将该数组第一个元素设置为比较元素
    int i = low;    //指向数组头的指针
    int j = high;    //指向数组尾的指针
    while (i &lt; j)
    {
        while (i &lt; j &amp;&amp; a[j] &gt;= x)
            j--;    //从右至左找到第一个小于比较元素的数
        while (i &lt; j &amp;&amp; a[i] &lt;= x)
            i++;    //从左至右找到第一个大于比较元素的数
        /*需要注意的是，这里的j--与i++的顺序不可以调换！
          如果调换了顺序，i会走过头，以至于将后面较大的元素交换到数组开头*/

        //将大数与小数交换
        if (i != j)
            swap(a[i], a[j]);
    }
    swap(a[low], a[i]);    //将比较元素交换到期望位置
    return i;    //返回比较元素的位置
}
</code></pre><h6 id="note" tabindex="-1">NOTE： <a class="header-anchor" href="#note" aria-label="Permalink to &quot;NOTE：&quot;">​</a></h6><p>*需要注意的是，这里的j--与i++的顺序不可以调换！ *如果调换了顺序，i会走过头，以至于将后面较大的元素交换到数组开头。</p><p>拿无序数组[5,3,2,1,4,6,7] 为例 <img src="https://img-blog.csdnimg.cn/20200320220646657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1dGhlcks=,size_16,color_FFFFFF,t_70" alt="image"> 上图这种情况就是将”i++“放在”j--“之前的后果。i走过了头，将比”基准值“（or比较元素5）更大的6交换到了数组开头！显然这种情况是我们不想看到的。 接着，看一下先移动指针 j 会有怎样的结果： <img src="https://img-blog.csdnimg.cn/20200320221132327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1dGhlcks=,size_16,color_FFFFFF,t_70" alt="image"> 比较上边两种情况，其实对于指针 j 来说，没有”过头“的概念，即使称之为”过头“了，最终与”基准值“相交换 换到数组开头的也是一个小于”基准值“（这里&lt;5）的元素，所以”j--“在前对结果无影响，但是若”i++“在前则会排序错误。</p><h4 id="_7、堆排序" tabindex="-1">7、堆排序 <a class="header-anchor" href="#_7、堆排序" aria-label="Permalink to &quot;7、堆排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015231308699-356134237.gif" alt="image"></p><h4 id="_8、桶排序" tabindex="-1">8、桶排序 <a class="header-anchor" href="#_8、桶排序" aria-label="Permalink to &quot;8、桶排序&quot;">​</a></h4><p><img src="https://img-blog.csdnimg.cn/20200209202605391.gif" alt="image"></p><h4 id="_9、基排序" tabindex="-1">9、基排序 <a class="header-anchor" href="#_9、基排序" aria-label="Permalink to &quot;9、基排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015232453668-1397662527.gif" alt="image"></p><h4 id="_10、计数排序" tabindex="-1">10、计数排序 <a class="header-anchor" href="#_10、计数排序" aria-label="Permalink to &quot;10、计数排序&quot;">​</a></h4><p><img src="https://images2017.cnblogs.com/blog/849589/201710/849589-20171015231740840-6968181.gif" alt="image"></p><h4 id="其它" tabindex="-1">其它 <a class="header-anchor" href="#其它" aria-label="Permalink to &quot;其它&quot;">​</a></h4><p>工具：算法动图可视化 <a href="https://visualgo.net/zh/sorting" target="_blank" rel="noreferrer">https://visualgo.net/zh/sorting</a></p><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><p><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noreferrer">十大经典排序算法（动图演示） </a><a href="https://www.cnblogs.com/sunriseblogs/p/10009890.html" target="_blank" rel="noreferrer">算法设计：两种快速排序代码实现</a><a href="https://www.bilibili.com/video/BV1fp4y1D7cj" target="_blank" rel="noreferrer">排序算法：堆排序【图解+代码】</a><a href="https://blog.csdn.net/LutherK/article/details/104999781" target="_blank" rel="noreferrer">图解快速排序算法-02</a></p>`,37)]))}const g=n(l,[["render",t]]);export{b as __pageData,g as default};
